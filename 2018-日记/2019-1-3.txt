关于线上课程code diff:
为什么需要code diff?
1、评估影响面
2、补充测试点
3、确定需求实现
4、提前发现问题如数据量的case
5、确认发布步骤
6、加深对技术实现的理解
我的理解是我们开发除了自测后有时可能会出现这样一些错误，代码仅修改了一行，最终出了故障。又比如一些低级错误merge代码出错，例如丢掉，合并错误分支。
或者对多个bug同时修改完成后，难以确定影响范围，新增代码不符合代码编写规范，最终上线代码与分支代码不一致。还比如在QA不知情下默默搭车改一些需求（应该避免这种情况）。
这时code diff就会发现查找这些问题，这里我觉得学习code diff也可以让我们在开发时就对自己代码有这些标准吧，不至于每次都要QA找出或导致故障。
何时进行code diff?
提测时 code diff
改bug后 code diff(修改前后)
发布前 code diff
如何进行code diff ?
1、准备：
熟悉产品需求 --需求文档、show case 、讲设计
如果是你怎么实现 -- 依赖于对系统的了解程度
了解产品、系统的整体结构以及与关联模块的交互关系
2、关注点（code diff产出）：
功能、接口变更、db、数据、安全、性能、第三方依赖是否正确使用、兼容如枚举值升级、
多线程并发是否会产生死锁的并发问题、监控日志是否添加完整等方面
3、补充 ：
前期准备的case是否有遗漏，补充checklist
系统实现是否合理、业务逻辑是否完整闭合
工作量评估，代码修改的影响是否在范围内
4、规范：
是否使用了system.out、e.printStackTrace()
Maven依赖规范
监控规范：系统监控，业务监控（通常在关键业务节点上添加，一般包括业务节点、业务被请求的次数、
处理时长、任务成功/失败监控等）
日志规范：
业务日志-考虑性能问题（数据量、磁盘io等）
异常日志-需要在diff过程明确catch注可能存在异常的部分，输出符合易读的原则，
null异常-日志的输出要判断变量是否可能为空，敏感信息是否加密了如果记在日志中)
5、代码层面：
如接口改了、调用了新的接口（超时时间是否合理），同步还是异步，是否加了异常处理，调用失败是否需要重试
for、while、递归算法要检查好退出条件避免死循环
多线程是否安全，是否需要加锁，加锁后是否及时释放
空指针异常如何处理，需要把空指针异常封装成业务异常	
枚举值新增字段--是否将所有的调用方都考虑到了，是否可回滚，考虑先升级枚举值
关于线上课程noah：
1、创建环境
2、创建基准库
3、更新模板
4、配置应用信息
5、创建模板
问题与解决：
code diff产出是什么？
1、测试范围/checklist补充
2、提前发现bug
3、发布和回滚步骤
4、系统结构设计改进建议
5、测试方案/方法
今天还完成了checklist和checklistreview。结合所学发现有些是根据需求文档按照一定模板填充写的，有些需要今后的系统设计和代码实现后再继续针对补充。比如code diff后。